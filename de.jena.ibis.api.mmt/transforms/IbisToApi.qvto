import de.jena.ibis.api.mmt.util.IbisDateTimeToDateBlackbox;

modeltype COMMON uses "https://jena.de/models/ibis/common/1.0";
modeltype ENUMERATIONS uses "https://jena.de/models/ibis/enumerations/1.0";
modeltype CUSTOMERINFO uses "https://jena.de/models/ibis/customerinfoservice/1.0";
modeltype GNSSLOCATION uses "https://jena.de/models/ibis/gnsslocationservice/1.0";
modeltype API uses "https://jena.de/models/ibis/rest/1.0";
modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');



transformation IbisToApi(in response: COMMON, out api : API);

main() {
	response.rootObjects()[CUSTOMERINFO::TripDataResponse] -> map tripToApi(); 
	response.rootObjects()[CUSTOMERINFO::PartialStopSequenceResponse] -> map stopSequenceToApi();
	response.rootObjects()[GNSSLOCATION::GNSSLocationData] -> map locationToApi();

}

mapping CUSTOMERINFO::TripDataResponse::tripToApi() : API::TripData {
	
	vehicleRef := self.tripData.vehicleRef.value.toString();
	timestamp := getMillis(self.tripData.timeStamp); 
	currentStopIndex := self.tripData.currentStopIndex.value;
	timetable := self.tripData.tripInformation.map toTimetable();
}

mapping CUSTOMERINFO::PartialStopSequenceResponse::stopSequenceToApi() : API::StopSequence {
	stopPoint += self.partialStopSequenceData.stopSequence.stopPoint.map toApiStopInformation();
}

mapping GNSSLOCATION::GNSSLocationData::locationToApi() : API::PositionData {
	timestamp := getMillis(self.time);
	position := self.map toApiPosition();
}

mapping GNSSLOCATION::GNSSLocationData::toApiPosition() : API::Position {
	latitude := self.latitude.degree.value;
	longitude := self.longitude.degree.value;
}

mapping COMMON::TripInformation::toTimetable() : API::Timetable {
	
	timetableRef := self.tripRef.value.toString();
	locationState := self.locationState.toApiLocationState();
	timetableDelay := self.timetableDelay.value;
	routeDirection := self.routeDirection.toApiRouteDirection();
	runNumber := self.runNumber.value;
	stopSequence := self.stopSequence.map toApiStopSequence();
}

mapping COMMON::StopSequence::toApiStopSequence() : API::StopSequence {
	stopPoint += self.stopPoint.map toApiStopInformation();
}

mapping COMMON::StopInformation::toApiStopInformation() : API::StopInformation {
	stopIndex := self.stopIndex.value;
	stopRef := self.stopRef.value.toString();
	stopName += self.stopName.value;
	arrivalScheduled := getDate(self.arrivalScheduled).oclAsType(ECORE::EDate); 
	arrivalExpected := getDate(self.arrivalExpected).oclAsType(ECORE::EDate); 
	departureScheduled := getDate(self.departureScheduled).oclAsType(ECORE::EDate); 
	departureExpected := getDate(self.departureExpected).oclAsType(ECORE::EDate); 
	recordedArrivalTime := getDate(self.recordedArrivalTime).oclAsType(ECORE::EDate); 
	distanceToNextStop := self.distanceToNextStop.value;	
}

query ENUMERATIONS::LocationStateEnumeration::toApiLocationState() : API::LocationStateType {
	return switch {
		case(self = ENUMERATIONS::LocationStateEnumeration::AfterStop) return API::LocationStateType::AFTER_STOP;
		case(self = ENUMERATIONS::LocationStateEnumeration::AtStop) return API::LocationStateType::AT_STOP;
		case(self = ENUMERATIONS::LocationStateEnumeration::BeforeStop) return API::LocationStateType::BEFORE_STOP;
		case(self = ENUMERATIONS::LocationStateEnumeration::BetweenStop) return API::LocationStateType::BETWEEN_STOP;
	}
}

query ENUMERATIONS::RouteDirectionEnumeration::toApiRouteDirection() : API::RouteDirectionType {
	return switch {
		case(self = ENUMERATIONS::RouteDirectionEnumeration::Forward) return API::RouteDirectionType::FORWARD;
		case(self = ENUMERATIONS::RouteDirectionEnumeration::Backward) return API::RouteDirectionType::BACKWARD;
		case(self = ENUMERATIONS::RouteDirectionEnumeration::Clockwise) return API::RouteDirectionType::CLOCKWISE;
		case(self = ENUMERATIONS::RouteDirectionEnumeration::Counterclockwise) return API::RouteDirectionType::COUNTERCLOCKWISE;
		case(self = ENUMERATIONS::RouteDirectionEnumeration::Other) return API::RouteDirectionType::OTHER;
	}
}
